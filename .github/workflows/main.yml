name: Deploy Webserver

on:
  workflow_dispatch:

env:
  GIT_API_TOKEN: ${{ secrets.GIT_API_TOKEN }}
  NGROK_API_KEY: ${{ secrets.NGROK_API_KEY }}
  GH_TOKEN: ${{ secrets.GIT_API_TOKEN }}
  
  VM_WEB_GUI_USERNAME: ${{ secrets.VM_WEB_GUI_USERNAME }}
  VM_WEB_GUI_PASSWORD: ${{ secrets.VM_WEB_GUI_PASSWORD }}
  ZIP_PASSWD: ${{ secrets.VM_WEB_GUI_PASSWORD }}
  AUTHORIZATION: ${{ secrets.AUTHORIZATION }}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
      
    - name: Installing Dependencies
      run: |
        sudo -E python3 -m pip install fastapi uvicorn python-dotenv python-multipart requests itsdangerous starlette --ignore-installed
        
    - name: Restore Previous State (Artifacts)
      run: |
        if gh release view 1 > /dev/null 2>&1; then
            echo "üîΩ Release v1 found. Downloading..."
            gh release download 1
            unzip -P "$ZIP_PASSWD" workspace.zip > /dev/null 2>&1
            rm -f workspace.zip
            
        else
            echo "‚ö†Ô∏è Release v1 does not exist. Skipping download."
        fi

    - name: Starting stopped container
      run: |
        sudo -E python3 startup.py > /dev/null 2>&1 &
        STARTUP_PID=$!
        
    - name: Deleting Previous Workflow and Restoring Container
      run: |
        sudo -E python3 del_workflow.py

    - name: Download Cloudflared and SSHX
      run: |
        wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O cloudflared
        curl -sSf https://sshx.io/get | sh
        chmod +x tunnel.sh
        chmod +x cloudflared

    - name: Running SSHX
      run: "sudo -E python3 sshx.py"
      
    - name: Running Ngrok
      run: |
        curl -o ngrok-tar.tgz https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xvzf ngrok-tar.tgz
        ./ngrok config add-authtoken $NGROK_API_KEY
        nohup ./ngrok http --url=special-titmouse-heavily.ngrok-free.app 5000 > ngrok.log 2>&1 &
        
    - name: Starting server
      run: |
        wait $STARTUP_PID
        sudo -E python3 -m uvicorn main:app --port 5000 &
    
    - name: Instance keep-alive
      run: |
        SLEEP=$((RANDOM % 1800 + 18000))  # 18000‚Äì19799
        echo "Sleeping for $SLEEP seconds (~$((SLEEP / 60)) minutes)"
        sleep $SLEEP
        
    - name: Save Session State (Artifacts)
      run: |
        ZIP_OUTPUT=$(zip --password "$ZIP_PASSWD" -r workspace.zip workspace 2>&1)
        ZIP_EXIT=$?

        if [ $ZIP_EXIT -ne 0 ]; then
            if echo "$ZIP_OUTPUT" | grep -q "zip error: Nothing to do!"; then
                echo "‚ö†Ô∏è Nothing to zip. Skipping release."
            else
                echo "‚ùå Unexpected zip error:"
                echo "$ZIP_OUTPUT"
                exit 1
            fi
        else
            echo "‚úÖ Zip created successfully. Uploading to release..."
            gh release delete 1 -y || true
            gh release create 1 workspace.zip
        fi

        
    - name: Retrigger Workflow
      env:
        REPO: ${{ github.repository }}

      run: |
        curl -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GIT_API_TOKEN" \
          https://api.github.com/repos/$REPO/actions/workflows/main.yml/dispatches \
          -d '{"ref":"main"}'
