name: Deploy Webserver

on:
  workflow_dispatch:

env:
  GIT_API_TOKEN: ${{ secrets.GIT_API_TOKEN }}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"

    - name: Installing essential module and library
      run: |
        python3 -m pip install requests
        sudo apt-get install tmate -y
        
    - name: Deleting previous workflow
      run: |
        python3 del_workflow.py
        
    - name: Running TMATE
      env:
        WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        ENDPOINT_SERVER: ${{ secrets.ENDPOINT_SERVER }}

      run: |
        # Start tmate in a new session in detached mode
        tmate -S ~/work/tmate.sock new-session -d

        # Wait for tmate to start and get the SSH connection string
        # This loop ensures we get the URL once tmate is ready
        TMATE_SSH_CMD=""
        for i in $(seq 1 10); do
          TMATE_SSH_CMD=$(tmate -S ~/work/tmate.sock display -p '#{tmate_ssh}')
          if [[ "$TMATE_SSH_CMD" == ssh* ]]; then
            # $ORIGINAL_URL="$(curl -sL --connect-timeout 5 --max-time 10 -o /dev/null -w "%{url_effective}" $ENDPOINT_SERVER)"
            # curl -X POST "$ORIGINAL_URL/change" -H "Content-Type: application/json" -d "{\"command\": \"$TMATE_SSH_CMD\"}"
            echo "TMATE command is found"
            break
          fi
          echo "Waiting for tmate SSH command... ($i/10)"
          sleep 2
        done

        if [[ "$TMATE_SSH_CMD" != ssh* ]]; then
          echo "Failed to get tmate SSH command. Exiting."
          exit 1
        fi

        # Send the SSH command to your webhook
        # echo "Sending Tmate SSH command to webhook..."
        # curl -X POST -H "Content-Type: application/json" \
        #   -d "{\"content\": \"ðŸš€ Tmate SSH session started on GitHub Actions runner! Connect with:\\n\`${TMATE_SSH_CMD}\`\\nThis session will be active for ~${{ job.timeout-minutes }} minutes.\"}" \
        #   $WEBHOOK_URL
        
        # Save the webhook message ID (if your script expects it for deletion)
        echo "Saving tmate_ssh_cmd for later reference."
        echo "$TMATE_SSH_CMD" > /home/runner/.tmate_ssh_cmd # Save for potential later use if needed
        
    - name: Instance keep-alive
      run: |
        SLEEP=$((RANDOM % 1800 + 18000))  # 18000â€“19799
        echo "Sleeping for $SLEEP seconds (~$((SLEEP / 60)) minutes)"
        sleep $SLEEP

        
    - name: Retrigger Workflow
      env:
        REPO: ${{ github.repository }}
        WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}

      run: |
          # curl -X DELETE $WEBHOOK_URL/messages/$(cat /home/runner/.webhook_id)

          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GIT_API_TOKEN" \
            https://api.github.com/repos/$REPO/actions/workflows/main.yml/dispatches \
            -d '{"ref":"main"}'
